(* 枚举类型 *)
(* 它们的定义显式地枚举了一个元素的有限集，其中每个元素都只是一个裸构造子
（译注：即无参数构造子）*)

Inductive day : Type :=
    | monday
    | tuesday
    | wednesday
    | thursday
    | friday
    | saturday
    | sunday.


(*定义一个函数：next_weekday*)
Definition next_weekday(d:day) : day :=
    match d with
    | monday    => tuesday
    | tuesday   => wednesday
    | wednesday => thursday
    | thursday  => friday
    | friday    => monday
    | saturday  => monday
    | sunday    => monday
    end.


(*计算next_compute 结果*)
Compute (next_weekday friday).

Compute (next_weekday (next_weekday saturday)).

Example test_next_weekday:
    (next_weekday(next_weekday saturday)) = tuesday.
Proof.
  simpl. reflexivity.
Qed.

(* 布尔值 *)
Inductive bool : Type :=
    | true
    | false.

Definition negb(b:bool) :bool:=
    match b with
    | true => false
    | false => true
    end.

Definition andb(b1:bool)(b2:bool):bool:=
    match b1 with
    | true => b2
    | false => false
    end.

Definition orb(b1:bool)(b2:bool):bool:=
  match b1 with
    | true => true
    | false => b2
    end.

Example test_orb1:
  (orb true false) = true.
Proof.
  simpl. reflexivity.
Qed.

(*Notation 指令能为既有的定义赋予新的符号记法*)
Notation "x && y":= (andb x y).
Notation "x || y":= (orb x y).

Example test_orb5: false || false || true =true.
Proof.
  simpl. reflexivity.
Qed.

(* 条件表达式 *)
Definition negb' (b:bool): bool:=
    if b then false
    else true.

Definition andb' (b1:bool)(b2:bool): bool:=
    if b1 then b2
    else false.

Definition orb'(b1:bool)(b2:bool): bool:=
    if b1 then true
    else b2.

(* Admitted 被用作不完整证明的占位符*)

(* 含有1个False 则为True*)
Definition nandb (b1:bool)(b2:bool) :bool:=
  match b1 with
  | true => match b2 with
            | true => false
            | false => true
            end
  | false => match b2 with 
            | true => true
            | false => true
            end
  end.

Example test_nandb1:               (nandb true false) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb2:               (nandb false false) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb3:               (nandb false true) = true.
Proof. simpl. reflexivity. Qed.
Example test_nandb4:               (nandb true true) = false.
Proof. simpl. reflexivity. Qed.

(* 输入均为true 则为true *)
Definition andb3 (b1:bool)(b2:bool)(b3:bool) :bool:=
  match b1 with
  | true => match b2 with
            | true => match b3 with
                      |true => true
                      |false => false
                      end
            | false => false
            end
  | false => false
  end.


(* 类型 *)
(* Check 指令会让 Coq 显示一个表达式的类型 *)
Check true.

Check true :bool.
Check (negb true) :bool.


(* 给定一个 bool 类型的输入，该函数产生一个 bool 类型的输出 *)
Check negb.
Check negb :bool-> bool.

(*给定两个 bool 类型的输入，该函数产生一个 bool 类型的输出 *)
Check andb.
Check andb :bool->bool->bool.


(* 由旧类型构造新类型 *)
(* 下面是一个更加有趣的类型定义，其中有个构造子接受一个参数 *)

Inductive rgb: Type :=
    | red
    | green
    | blue.

Inductive color : Type:=
    | black
    | white
    | primary (p : rgb).

(* primary p（读作“构造子 primary 应用于参数 p）是属于集合 color 的构造子表达式 *)

Definition monochrome (c :color) : bool :=
    match c with
    | black => true
    | white => true
    | primary p => false
    end.

Definition isred (c:color) :bool :=
    match c with
    | black => false
    | white => false
    | primary red => true
    | primary _ => false
    end.


(* ？？元组 *)
Inductive bit : Type :=
    | B0
    | B1.

Inductive nybble : Type :=
    | bits ( b0 b1 b2 b3 :bit).

Check (bits B1 B0 B1 B0).

Definition all_zero(nb : nybble) : bool :=
  match nb with
    | (bits B0 B0 B0 B0) => true
    | (bits _ _ _ _) => false
  end.

Compute (all_zero (bits B1 B0 B1 B0)).

Compute (all_zero (bits B0 B0 B0 B0)).

(* 模块 *)
Module NatPlayground.

(* 数值 *)

(* 这里开始定义一些无限集合*)
Inductive nat : Type :=
    | O
    | S (n :nat).

(*构造子表达式 O 属于集合 nat；
  如果 n 是属于集合 nat 的构造子表达式， 那么 S n 也是属于集合 nat 的构造子表达式；并且
  只有以这两种产生的方式构造字表达式才属于集合 nat *)

Inductive nat' : Type :=
    | stop
    | tick (foo : nat').

(* 前趋函数 *)
Definition pred (n: nat) : nat :=
    match n with
    | O => O
    | S n' => n'
    end.

Compute (pred O).
(* Compute (pred 2).？？？ *)

(* 如果 n 对于某个 n' 的形式为 S n'， 那么就返回 n'。*)

End NatPlayground.

Check (S(S(S(S 0)))).

Definition minustwo (n : nat) : nat :=
    match n with 
    | O => O
    | S O => O
    | S (S n') => n'
    end.

Compute (minustwo 4). (* 具体运行机制 *)

Check S : nat -> nat.
Check pred : nat -> nat.
Check minustwo : nat -> nat.


(* fixpoint 定义递归 *)
(* 判是不是偶数 *)
Fixpoint evenb (n: nat) : bool :=
  match n with 
  | O => true
  | S O => false
  | S ( S n') => evenb n'
  end.

(* 判是不是奇数 *)
Definition oddb (n: nat) : bool :=
    negb ( evenb n).

Example test_oddb1 : oddb 1 = true.
Proof.
  simpl. reflexivity.
Qed.

Example test_oddb2 : oddb 4 = false.
Proof.
  reflexivity.
Qed.


(* 递归定义多参参数*)
Module NatPlayground2.

Fixpoint plus (n : nat) (m : nat) : nat :=
  match n with 
    | O => m
    | S n' => S (plus n' m)
  end.

Compute (plus 3 2). 

Fixpoint mult (n m : nat) : nat :=
  match n with 
    | O => O
    | S n' => plus m (mult n' m)
  end.

Example test_mult1: (mult 3 3) = 9.
Proof.
  simpl. reflexivity.
Qed.
 
Fixpoint minus (n m :nat) : nat :=
  match n, m with
  | O, _ => O
  | S _ ,O => n
  | S n', S m' => minus n' m'
  end.

End NatPlayground2.

Fixpoint exp (base power : nat) : nat :=
  match power with 
    | O => S O
    | S p => mult base (exp base p)
  end.




(* 练习 1星 *)
Fixpoint factorial (n:nat) : nat :=
  match n with
    | O => 1
    | S n' => mult n (factorial n')
  end.

Example test_factorial1: (factorial 3) = 6.
Proof.
  simpl. reflexivity.
Qed. 

Example test_factorial2: (factorial 5) = (mult 10 12).
Proof.
  simpl. reflexivity.
Qed.

Notation "x + y" := (plus x y) (at level 50, left associativity) : nat_scope.

Notation "x - y" := (minus x y) (at level 50, left associativity) : nat_scope.

Notation "x * y" := (mult x y) (at level 40, left associativity) : nat_scope.

Check((0+1)+1).


(* eqb *)
Fixpoint eqb (n m : nat) : bool :=
    match n with 
    | O => match m with
                  | O => true
                  | S m' => false
                  end
    | S n' => match m with
                  | 0 => false
                  | S m' => eqb n' m'
                  end
    end.

Fixpoint leb(n m :nat) : bool :=
    match n with
    | O => true
    | S n' =>
            match m with 
            | O => false
            | S m' => leb n' m'
            end
    end.


Example test_leb1: leb 2 2 = true.
Proof.
  simpl. reflexivity.
Qed.

Example test_leb2: leb 2 4 = true.
Proof.
  simpl. reflexivity.
Qed.

Example test_leb3: leb 4 2 = false.
Proof.
  simpl. reflexivity.
Qed.

Notation "x =? y" := (eqb x y) (at level 70) : nat_scope.

Notation "x <=? y" := (leb x y) (at level 70) : nat_scope.

Example test_leb3' : (4 <=? 2) = false.
Proof.
  simpl. reflexivity.
Qed.

Definition ltb(n m :nat): bool :=
  (negb (eqb n m)) && (leb n m).

Notation "x <? y" := (ltb x y) (at level 70) : nat_scope.

Example test_ltb1 : (ltb 2 2) = false.
Proof.
  simpl. reflexivity.
Qed.

Example test_ltb2 : (ltb 2 4) = true.
Proof.
  simpl. reflexivity.
Qed.

Example test_ltb3 : (ltb 4 2) = false.
Proof.
  simpl. reflexivity.
Qed.

Theorem plus_0_n : forall n : nat, 0 + n = n.
Proof.
  intros n. simpl. reflexivity.
Qed.

Theorem plus_0_n' : forall n :nat, 0 + n = n.
Proof.
  intros n. reflexivity.
Qed.

(*此外，reflexivity 在某些方面做了比 simpl '更多'的化简 —— 比如它会尝试“展开”已定义的项，
将它们替换为该定义右侧的值。 
产生这种差别的原因是，当自反性成立时， 整个证明目标就完成了，
我们不必再关心 reflexivity 化简和展开了什么；
而当我们必须去观察和理解新产生的证明目标时，我们并不希望盲目地展开定义，
将证明目标留在混乱的声明中。这种情况下就要用到 simpl 了。*)

(* 其次，我们增加了量词 ∀ n:nat，因此我们的定理讨论了'所有的' 自然数 n。 
在非形式化的证明中，为了证明这种形式的定理，我们通常会说“'假设' 存在一个任意自然数 n...”。
而在形式化证明中，这是用 intros n 来实现的，它会将量词从证明目标转移到当前假设的'上下文'中。 
注意在 intros 从句中，我们可以使用别的标识符来代替 n （当然这可能会让阅读证明的人感到困惑）*)

Theorem plus_1_1 : forall n:nat, 1 + n = S n.
Proof.
  intros n. simpl. reflexivity.
Qed.

Theorem mult_0_1 : forall n:nat, 0 * n = 0.
Proof.
  intros n. simpl. reflexivity.
Qed.




(* 基于改写的证明 *)
Theorem plus_id_example : forall n m: nat,
   n = m ->
  n + n = m + m.
Proof.
  intros n m. 
  intros H.
  rewrite <- H.
  reflexivity.
Qed.

(* 证明的第一行将全称量词变量 n 和 m 移到上下文中。第二行将前提 n = m 移到上下文中，
并将其命名为 H。第三行告诉 Coq 改写当前目标（n + n = m + m），
把前提等式 H 的左边替换成右边。*)


Theorem plus_id_exercise : forall n m o : nat,
  n = m -> m = o -> n + m = m + o.
Proof.
  intros n m o.
  intros.
  rewrite H. rewrite <- H0.
  reflexivity.
Qed.



Check mult_n_O.
Check mult_n_Sm.


(* 除了上下文中现有的假设外，我们还可以通过 rewrite 策略来运用前期证明过的定理。
如果前期证明的定理的语句中包含量词变量，
如前例所示，Coq 会通过匹配当前的证明目标 来尝试实例化（Instantiate）它们。*)

Theorem mult_n_0_m_0 : forall n m: nat,
  (n * 0) + (m * 0) = 0.
Proof.
  intros n m.
  rewrite <- mult_n_O.
  rewrite <- mult_n_O.
  reflexivity.
Qed.

Theorem mult_n_1 : forall n :nat,
  n * 1 = n.
Proof.
  intros. rewrite <- mult_n_Sm.
  rewrite <- mult_n_O.
  reflexivity.
Qed.



(* 利用分类讨论来证明 *)
Theorem plus_1_neq_0_firsttry : forall n : nat,
  (n + 1) =? O = false.
Proof.
  intros n.
  simpl.
Abort.

(* 原因在于：根据 eqb 和 + 的定义，其第一个参数先被 match 匹配。 
但此处 + 的第一个参数 n 未知，而 eqb 的第一个参数 n + 1 是复合表达式，二者均无法化简。*)


(* 欲进行规约，则需分情况讨论 n 的所有可能构造。
如果 n 为 O， 则可验算 (n + 1) =? 0 的结果确实为 false；
如果 n 由 S n' 构造， 那么即使我们不知道 n + 1 表示什么，但至少知道它的构造子为 S,
因而足以得出 (n + 1) =? 0 的结果为 false。*)

(*告诉 Coq 分别对 n = 0 和 n = S n' 这两种情况进行分析的策略，叫做 destruct。*)
Theorem plus_1_neq_0_firsttey : forall n : nat,
    (n + 1) =? O = false.
Proof.
  intros n. destruct n as [| n'] eqn:E. (* 简写形式是 intro[|n]*)
  - reflexivity.
  - reflexivity.
Qed.

(* as [| n'] 这种标注被称为 '引入模式'。它告诉 Coq 应当在每个子目标中使用什么样的变量名。
总体而言，在方括号之间的是一个由 | 隔开的 '列表的列表'。
在上面的例子中，第一个元素是 一个空列表，因为 O 构造子是一个空构造子（它没有任何参数）。 
第二个元素提供了包含单个变量名 n' 的列表，因为 S 是一个单构造子。
在每个子目标中，Coq 会记录这个子目标中关于 n 的假设，n = 0 还是 对于某个 n', n = S n'。

而 eqn:E 记号则告知 Coq 以 E 来命名这些 假设。省略 eqn:E 会导致 Coq 省略这些假设。
这种省略能够使得一些不需要 显式用到这类假设的证明显得更加流畅。
但在实践中最好还是保留他们， 因为他们可以作为一种说明文档来在证明过程中指引你。

在本例中，每个子目标都简单地使用 reflexivity 完成了证明。
通常，reflexivity 本身会执行一些化简操作。 
例如，第二段证明将 at (S n' + 1) 0 化简成 false，
是通过先将 (S n' + 1) 转写成 S (n' + 1)，接着展开 beq_nat，之后再化简 match 完成的。*)


(* 布尔值的取反是对合involutive的,即取反是自身的逆运算 *)

Theorem negb_involutive : forall b : bool,
  negb (negb b) = b.
Proof.
  intros b. destruct b eqn:E.
  - reflexivity.
  - reflexivity.
Qed.

(* 有时在一个子目标内调用 destruct，
产生出更多的证明义务（Proof Obligation） 也非常有用。
这时候，我们使用不同的标号来标记目标的不同“层级”*)


(* Theorem andb_commutative : forall b c, andb b c = andb b c.
Proof.
  intros b c.
  reflexivity.
Qed. *)

Theorem andb_commutative : forall b c, andb b c = andb b c.
Proof.
  intros b c. destruct b eqn:Eb.
  - destruct c eqn:Ec.
    + reflexivity.
    + reflexivity.
  - destruct c eqn:Ec.
    + reflexivity.
    + reflexivity.
Qed.

(* 我们可以在引入 一个变量的同时对他使用'引入模式'来进行分类讨论。*)
(* 简短证明 *)
Theorem plus_1_neq_0' : forall n : nat,
  (n + 1) =? O = false.
Proof.
  intros [|n].
  - reflexivity.
  - reflexivity.
Qed.


(* 如果没有需要命名的构造子参数，我们只需要写上[] 即可进行分析 *)
Theorem andb_commutative'' :
  forall b c, andb b c = andb c b.
Proof.
  intros [] [].
  - reflexivity.
  - reflexivity.
  - reflexivity.
  - reflexivity.
Qed.


(* 练习 2星*)
Theorem andb_true_elim2 : forall b c : bool,
  andb b c = true -> c = true.
Proof.
  intros b c. destruct c.
  - reflexivity.
  - destruct b.
    + intros. auto.
    + intros. auto.
Qed.
  

(* 练习 1星*)
Theorem zero_nebp_plus_1: forall n : nat,
  O =? (n + 1) = false.
Proof.
  intros [|n].
  - reflexivity.
  - reflexivity.
Qed. 


(* 每个记法符号还与 '记法范围'相关。Coq 会尝试根据上下文来猜测你所指的范围，
因此当你写出 S(0*0) 时，它猜测是 nat_scope；
而当你 写出积（元组）类型 bool×bool 时，它猜测是 type_scope。 
有时你可能必须百分号记法 (x×y)%nat 来帮助 Coq 确定范围。
另外，有时 Coq 打印的结果中也用 %nat 来指示记法所在的范围。
记法范围同样适用于数值记法（3、4、5、42 等等），
因此你有时候会看到 0%nat，表示 0（即我们在本章中使用的自然数零 0），
而 0%Z 表示整数零 （来自于标准库中的另一个部分）。*)



(* 不动点Fixpoint和结构化递归 *)
Fixpoint plus' (n : nat) (m : nat) : nat :=
  match n with 
  | O => m
  | S n' => S (plus' n' m)
  end.

(* Coq 要求每个Fixpoint 定义中的某些参数必须是“递减的” *)


(* 更多联系 *)
Theorem identity_fn_applied_twice :
  forall (f : bool -> bool), (forall (x : bool), f x = x) ->
  forall (b : bool), f( f b) = b.
Proof.
  (* intros. rewrite H. rewrite H. reflexivity. *)
  intros. specialize H with b. rewrite H. auto.
Qed.


Theorem negation_fn_applied_twice :
  forall (f : bool -> bool), (forall (x : bool), f x =negb x) ->
  forall (b : bool), f (f b) = b.
Proof.
  intros. rewrite H. rewrite H.
  destruct b.
  - reflexivity.
  - reflexivity.
Qed.




















  